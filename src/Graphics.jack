class Graphics
{
    field int x;

    constructor Graphics new()
    {
        return this;
    }

    method void drawPlayer(int x, int y)
    {
        var int memAddress;
        let memAddress = 16384 + x + (32 * y);
        do Memory.poke(memAddress + 0, 2016);
        do Memory.poke(memAddress + 32, 14492);
        do Memory.poke(memAddress + 64, 10516);
        do Memory.poke(memAddress + 96, 1184);
        do Memory.poke(memAddress + 128, 832);
        do Memory.poke(memAddress + 160, 704);
        do Memory.poke(memAddress + 192, 4488);
        do Memory.poke(memAddress + 224, 5544);
        do Memory.poke(memAddress + 256, 5544);
        do Memory.poke(memAddress + 288, 5544);
        do Memory.poke(memAddress + 320, 2064);
        do Memory.poke(memAddress + 352, 2448);
        do Memory.poke(memAddress + 384, 2640);
        do Memory.poke(memAddress + 416, 2640);
        do Memory.poke(memAddress + 448, 2640);
        do Memory.poke(memAddress + 480, 32382);
        return;
    }

    method void removePlayer(int x, int y)
    {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + 15, y + 15);
        return;
    }

    method void drawEnemy(int x, int y)
    {
        var int memAddress;
        let memAddress = 16384 + x + (32 * y);
        do Memory.poke(memAddress + 0, 960);
        do Memory.poke(memAddress + 32, 2016);
        do Memory.poke(memAddress + 64, 2016);
        do Memory.poke(memAddress + 96, 960);
        do Memory.poke(memAddress + 128, 384);
        do Memory.poke(memAddress + 160, 384);
        do Memory.poke(memAddress + 192, 4080);
        do Memory.poke(memAddress + 224, 3024);
        do Memory.poke(memAddress + 256, 3024);
        do Memory.poke(memAddress + 288, 3024);
        do Memory.poke(memAddress + 320, 2016);
        do Memory.poke(memAddress + 352, 1632);
        do Memory.poke(memAddress + 384, 1056);
        do Memory.poke(memAddress + 416, 1056);
        do Memory.poke(memAddress + 448, 1056);
        do Memory.poke(memAddress + 480, 15420);
        return;
    }

    method void removeEnemy(int x, int y)
    {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + 15, y + 15);
        return;
    }

    method void drawDoor(int x, int y)
    {
        var int memAddress;
        let memAddress = 16384 + x + (32 * y);
        do Memory.poke(memAddress + 0, 32767);
        do Memory.poke(memAddress + 32, 16385);
        do Memory.poke(memAddress + 64, 16385);
        do Memory.poke(memAddress + 96, 16385);
        do Memory.poke(memAddress + 128, 16385);
        do Memory.poke(memAddress + 160, 16385);
        do Memory.poke(memAddress + 192, 32257);
        do Memory.poke(memAddress + 224, 32257);
        do Memory.poke(memAddress + 256, 17921);
        do Memory.poke(memAddress + 288, 17921);
        do Memory.poke(memAddress + 320, 16385);
        do Memory.poke(memAddress + 352, 16385);
        do Memory.poke(memAddress + 384, 16385);
        do Memory.poke(memAddress + 416, 16385);
        do Memory.poke(memAddress + 448, 16385);
        do Memory.poke(memAddress + 480, 24573);
        do Memory.poke(memAddress + 1, 32767);
        do Memory.poke(memAddress + 33, 16385);
        do Memory.poke(memAddress + 65, 16385);
        do Memory.poke(memAddress + 97, 16385);
        do Memory.poke(memAddress + 129, 16385);
        do Memory.poke(memAddress + 161, 16385);
        do Memory.poke(memAddress + 193, 16447);
        do Memory.poke(memAddress + 225, 16447);
        do Memory.poke(memAddress + 257, 16433);
        do Memory.poke(memAddress + 289, 16433);
        do Memory.poke(memAddress + 321, 16385);
        do Memory.poke(memAddress + 353, 16385);
        do Memory.poke(memAddress + 385, 16385);
        do Memory.poke(memAddress + 417, 16385);
        do Memory.poke(memAddress + 449, 16385);
        do Memory.poke(memAddress + 481, 32767);
        return;
    }

    method void drawStairs(int x, int y) {
        var int memAddress;
        let memAddress = 16384 + x + (32 * y);
        do Memory.poke(memAddress+0, 16414);
        do Memory.poke(memAddress+32, 16610);
	    do Memory.poke(memAddress+64, 18178);
	    do Memory.poke(memAddress+96, 30722);
	    do Memory.poke(memAddress+128, 18178);
	    do Memory.poke(memAddress+160, 16610);
	    do Memory.poke(memAddress+192, 16414);
	    do Memory.poke(memAddress+224, 16610);
	    do Memory.poke(memAddress+256, 18178);
	    do Memory.poke(memAddress+288, 30722);
	    do Memory.poke(memAddress+320, 18178);
	    do Memory.poke(memAddress+352, 16610);
	    do Memory.poke(memAddress+384, 16414);
	    do Memory.poke(memAddress+416, 16610);
	    do Memory.poke(memAddress+448, 18178);
	    do Memory.poke(memAddress+480, 30722);
        do Memory.poke(memAddress+512, 18178);
	    do Memory.poke(memAddress+544, 16610);
	    do Memory.poke(memAddress+576, 16414);
	    do Memory.poke(memAddress+608, 16610);
	    do Memory.poke(memAddress+640, 18178);
	    do Memory.poke(memAddress+672, 30722);
        do Memory.poke(memAddress+704, 16380);
        do Memory.poke(memAddress+736, 16380);
        return;
    }

    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }
}