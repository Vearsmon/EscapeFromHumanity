class Game
{
    field bolean win;
    field bolean fail;
    field Graphics graphics;
    field int playerLocation;
    field int xPlayer;
    field int yPlayer;
    field Array stairs;
    field AllEnemies allEnemies;

    constructor Game new()
    {
        let win = false;
        let fail = false;
        let graphics = Graphics.new();
        let playerLocation = 0;
        let xPlayer = 0;
        let yPlayer = 39;

        let stairs = Array.new(8);
        let stairs[0] = 8;
        let stairs[1] = 17;
        let stairs[2] = 15;
        let stairs[3] = 19;
        let stairs[4] = 6;
        let stairs[5] = 31;
        let stairs[6] = 13;
        let stairs[7] = 4;

        return this;
    }

    //Приветствие
    method void showHello()
    {
        do Screen.setColor(true);
        do Output.moveCursor(4, 8);
        do Output.printString("Privetik!");
        do Output.moveCursor(8, 8);
        do Output.printString("Slabo do dveri doletetb");
        do Output.moveCursor(10, 8);
        do Output.printString("Ksta cheliki mogut tebya koknutb");
        do Output.moveCursor(14, 8);
        do Output.printString("GLHF!");
        do Output.moveCursor(18, 8);
        do Output.printString("Press any button to continue");
        while(Keyboard.keyPressed() = 0)
        {
            do Sys.wait(10);
        }
        return;
    }

    //Создание игровой области
    method void createBoard()
    {
        var int lineWidth;
        var int lineCount;
        var int currentLine;
        var int floorWidth;
        var int currentY;
        
        let lineCount = 9;
        let lineWidth = 2;
        let currentLine = 0;
        let floorWidth = 22;
        let currentY = 55;

        do Screen.clearScreen();

        //Рисуем этажи
        while (currentLine < lineCount)
        {
            do Screen.setColor(true);
            do Screen.drawRectangle(0, currentY, 511, currentY + lineWidth);
            let currentY = currentY + lineWidth + floorWidth;
            let currentLine = currentLine + 1;
        }

        do deployStairs();
        do graphics.drawDoor(29, 231);
        do graphics.drawPlayer(xPlayer, yPlayer);
        let allEnemies = AllEnemies.new();

        return;
    }

    method void movePlayer(int button)
    {
        // Движение вправо
        if ((button = 132) & (xPlayer < 31))
        {
            do graphics.removePlayer(xPlayer + (playerLocation*15), yPlayer);
            do deployStairs();
            let xPlayer = xPlayer + 1;
            do graphics.drawPlayer(xPlayer, yPlayer);
            let playerLocation = playerLocation + 1;
            do Sys.wait(70);
        }

        // Движение влево
        if ((button = 130) & (xPlayer > 0))
        {
            do graphics.removePlayer(xPlayer + (playerLocation*15), yPlayer);
            do deployStairs();
            let xPlayer = xPlayer - 1;
            do graphics.drawPlayer(xPlayer, yPlayer);
            let playerLocation = playerLocation - 1;
            do Sys.wait(70);
        }

        // Движение вниз
        if ((button = 133) & (yPlayer < 225) & (isStairsThere(xPlayer, yPlayer) = true))
        {
            do graphics.removePlayer(xPlayer + (playerLocation*15), yPlayer);
            do deployStairs();
            let yPlayer = yPlayer + 24;
            do graphics.drawPlayer(xPlayer, yPlayer);
            do Sys.wait(70);
        }

        // Движение вверх
        if ((button = 131) & (yPlayer > 39) & (isStairsThere(xPlayer, yPlayer - 24) = true))
        {
            do graphics.removePlayer(xPlayer + (playerLocation*15), yPlayer);
            do deployStairs();
            let yPlayer = yPlayer - 24;
            do graphics.drawPlayer(xPlayer, yPlayer);
            do Sys.wait(70);
        }

        if (((xPlayer = 30) | (xPlayer = 29)) & (yPlayer = 231))
        {
            let win = true;
        }

        if(allEnemies.isEnemyThere(xPlayer, yPlayer))
        {
            let fail = true;
        }

        return;
    }

    method void moveEnemy()
    {
        do deployStairs();
        do allEnemies.run();
        do graphics.drawDoor(29, 231);
        do graphics.drawPlayer(xPlayer, yPlayer);

        if (allEnemies.isEnemyThere(xPlayer, yPlayer))
        {
            let fail = true;
        }

        return;
    }

    method void deployStairs()
    {
        var int index;
        var int y;

        let y = 57;
        let index = 0;
    
        while (index < 8)
        {
            do graphics.drawStairs(stairs[index], y);
            let y = y + 24;
            let index = index + 1;
        }

        return;
    }

    method boolean isStairsThere(int x, int y)
    {
        return (stairs[(y-39)/24] = x);
    }

    method boolean winGame()
    {
        return win;
    }

    method boolean failGame()
    {
        return fail;
    }

    //Сообщение победы
    method void showWin()
    {
        do Screen.clearScreen();
        do Screen.setColor(true);
        do Output.moveCursor(10, 20);
        do Output.printString("Niiiiiiiiiice bro");
        do Output.println();
        do Output.moveCursor(12, 20);
        do Output.printString("Pravda eto slishkom legko");
        do Output.moveCursor(14, 20);
        do Output.printString("tak chto mozhesh ne radovatsa");
        return;
    }

    //Сообщение проигрыша
    method void showFail()
    {
        do Screen.clearScreen();
        do Screen.setColor(true);
        do Output.moveCursor(10, 20);
        do Output.printString("Ooooh man");
        do Output.println();
        do Output.moveCursor(12, 20);
        do Output.printString("Kak ty proigral s etim spravitsa");
        do Output.moveCursor(14, 20);
        do Output.printString("moya pyatiletnaya sestra");
        return;
    }

    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }
}